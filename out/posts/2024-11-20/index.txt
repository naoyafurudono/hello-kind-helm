3:I[4707,[],""]
5:I[6423,[],""]
6:I[2972,["972","static/chunks/972-f708ded502b3627d.js","185","static/chunks/app/layout-aa1129b13619db0b.js"],""]
4:["id","2024-11-20","d"]
0:["N2S61W7SgBtvfjyLIwY7-",[[["",{"children":["posts",{"children":[["id","2024-11-20","d"],{"children":["__PAGE__?{\"id\":\"2024-11-20\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["id","2024-11-20","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","html",null,{"lang":"ja","children":[["$","style",null,{"children":"\n[id] {\n  border: 2px solid transparent; /* 初期のボーダー */\n  transition: all 0.3s ease; /* トランジション効果 */\n  cursor: pointer; /* カーソルをポインタにする */\n}\n\n[id]:hover {\n  background-color: #f0f0f0; /* 背景色を変更 */\n  border-color: #007bff; /* ボーダーの色を変更 */\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); /* シャドウを追加 */\n}\n\n[id]:focus {\n  outline: none; /* デフォルトのアウトラインを消す */\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5); /* フォーカス時の影を追加 */\n}\n\t\t"}],["$","body",null,{"children":[["$","header",null,{"children":["$","nav",null,{"children":["$","ul",null,{"children":[["$","li","/",{"children":["$","$L6",null,{"href":"/","children":"diary.nfurudono.com"}]}],["$","li","/todos/",{"children":["$","$L6",null,{"href":"/todos/","children":"todos"}]}],["$","li","https://twitter.com/furudono2",{"children":["$","$L6",null,{"href":"https://twitter.com/furudono2","children":"書いてる人のTwitter"}]}],["$","li","https://zenn.dev/nfurudono",{"children":["$","$L6",null,{"href":"https://zenn.dev/nfurudono","children":"最近の技術記事（Zenn、試しに使っています）"}]}],["$","li","https://blog.nfurudono.com",{"children":["$","$L6",null,{"href":"https://blog.nfurudono.com","children":"技術記事"}]}]]}]}]}],["$","main",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}],["$","footer",null,{"children":["$","nav",null,{"children":["$","ul",null,{"children":[["$","li","/",{"children":["$","$L6",null,{"href":"/","children":"diary.nfurudono.com"}]}],["$","li","/todos/",{"children":["$","$L6",null,{"href":"/todos/","children":"todos"}]}],["$","li","https://twitter.com/furudono2",{"children":["$","$L6",null,{"href":"https://twitter.com/furudono2","children":"書いてる人のTwitter"}]}],["$","li","https://zenn.dev/nfurudono",{"children":["$","$L6",null,{"href":"https://zenn.dev/nfurudono","children":"最近の技術記事（Zenn、試しに使っています）"}]}],["$","li","https://blog.nfurudono.com",{"children":["$","$L6",null,{"href":"https://blog.nfurudono.com","children":"技術記事"}]}]]}]}]}]]}]]}]],null],null],["$L7",null]]]]
8:T2263,<h2 id="スキーマ駆動cliツール開発を支援するツールをprotoに乗っかって作りたい" onclick="
          event.preventDefault();
          const url = window.location.origin + window.location.pathname + &#x27;#&#x27; + this.id;
          navigator.clipboard.writeText(url).then(_ => {
            window.location.href = url;
          })
        " style="cursor: pointer;">スキーマ駆動CLIツール開発を支援するツールをprotoに乗っかって作りたい</h2>
<ul class="contains-task-list">
<li class="task-list-item"><svg id="SatV_tJKFI-IRwms5VVFojN3PPiVl0xsPlO2BS46WFg" viewBox="0 0 24 24" width="16" height="16" xmlns="http://www.w3.org/2000/svg" onclick="
          event.preventDefault();
          const url = window.location.origin + window.location.pathname + &#x27;#&#x27; + this.id;
          navigator.clipboard.writeText(url).then(_ => {
            window.location.href = url;
          })
        " style="cursor: pointer;"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg><input type="checkbox" checked disabled> proto2cliを実装する
<ul>
<li>やった
<ul>
<li>zennに紹介記事を書いた <a href="https://zenn.dev/nfurudono/articles/719e3aafac6065">https://zenn.dev/nfurudono/articles/719e3aafac6065</a></li>
<li>kamakura.go #7で発表した <a href="https://kamakurago.connpass.com/event/336353/">https://kamakurago.connpass.com/event/336353/</a>
<ul>
<li>スライドはこれ <a href="https://speakerdeck.com/naoyafurudono/protocol-bufferssukimading-yi-kara-gonocliwosheng-cheng-suru">https://speakerdeck.com/naoyafurudono/protocol-bufferssukimading-yi-kara-gonocliwosheng-cheng-suru</a></li>
</ul>
</li>
<li>まだ本番環境に組み込めてないのと、機能開発とか開発環境の整備ができていない。やる</li>
</ul>
</li>
<li>名前を決める：connectはブラウザやgRPCと互換性のあるAPIを提供するのに必要なボイラープレートが必要なのを軽減してくれるやつ。
<ul>
<li>これはそれらにCLIをインターフェースとして加える。つまりローカルから、サーバを立てる事なく実行できるようにする。そういう立ち位置がいい。単にインターフェースを一個加えるだけ。実装はできるだけシェアしたい。</li>
<li>まずはconnectを採用するアプリケーションを一個用意して、それにCLIを入れる。ここで上手い入れ方を探る</li>
<li>次にその入れる作業を自動化する。そのためのCLIがproto2cli</li>
</ul>
</li>
<li>サブコマンドでサービス、位置引数でメソッド、フラグ引数(<code>-d</code>)でリクエストメッセージを受け取る。
<ul>
<li>サブコマンドと位置引数は最初は特に区別しなくていいか。 <code>cmd &#x3C;service> &#x3C;method> -d &#x3C;request message json></code> の形式で呼び出すだけ。</li>
<li>CLIへの入力はそのままサービス名、メソッド名、リクエストメッセージがそれぞれbyte列かstringのどちらかで得られる。それらをなんとかするのは一旦別のコンポーネントの役割にしよう</li>
<li>ここまでは普通にflagsパッケージとかを使うだけでいける</li>
</ul>
</li>
<li>次にリクエストメッセージのデコードを自動化する。
<ul>
<li><code>func unmarshalRPC(service, method, req string) (MessageInterface, error)</code>
<ul>
<li>対応する型のunmarshellerへのディスパッチとその呼び出しが責務</li>
</ul>
</li>
<li><code>dispatchUnMarshelelr(service, method string) (func(byte[], MessageInterface) error, error)</code>
<ul>
<li>ディスパッチだけでも良さそう</li>
</ul>
</li>
</ul>
</li>
<li>次に、サービスの呼び出しを行う
<ul>
<li>connect サーバをclient経由で呼び出す</li>
<li>単にサービスを呼び出す
<ul>
<li>インターセプタを通過できない、特にproto validateを通せない</li>
</ul>
</li>
<li>インターセプタとサービスを合成する
<ul>
<li>できればhttpサーバの仕組みに乗っかりたい</li>
<li>でも無理がありそう、intercepter (unaryfunc) を受け入れてデコレートする感じにしそう</li>
</ul>
</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>
<p>以下のようなprotoスキーマを定義する。</p>
<pre><code class="language-proto">syntax = "proto3";

package nfurudono.sample.v1;

service SamplService {
  rpc Say(SayRequest) returns (SayResponse) {}
}

// SayRequest is a single-sentence request.
message SayRequest {
  string sentence = 1;
}

// SayResponse is a single-sentence response.
message SayResponse {
  string sentence = 1;
  bool dry_run = 2;
}
</code></pre>
<p>こんな定義があるときに</p>
<pre><code class="language-sh">$ ./sample say --sentence "hello world" --dryrun
sentence: "I will say: hello world"
</code></pre>
<p>みたいなやりとりを定義するためのCLIテンプレート生成ツールを作る。あくまでテンプレートなので、生成ツールではインターフェースとかグルーコードだけ提供して、ユーザは以下のようなコードを書くことになる。</p>
<ul>
<li>connectとかでサービスとサーバの起動を定義してmainからいい感じに呼ぶようにすると、gRPCサーバがたつのに対して、</li>
<li>CLIテンプレート作成ツールでサービスとCLIコマンドの呼び出しを定義してmainからいい感じに呼ぶようにすると、CLIから実行できる</li>
</ul>
<h3 id="サービスの実装" onclick="
          event.preventDefault();
          const url = window.location.origin + window.location.pathname + &#x27;#&#x27; + this.id;
          navigator.clipboard.writeText(url).then(_ => {
            window.location.href = url;
          })
        " style="cursor: pointer;">サービスの実装</h3>
<pre><code class="language-go">package service

improt (
	"fmt"
	
  sample "github.com/nfurudono/gen/go/sample"
)

type SampleImpl struct {}
// sample.SampleServiceはprotocとかが生成するようなinterface。gRPCとかconnectとかで使われているようなやつ。
var _ sample.SampleService = &#x26;NewSampleImpl()

func NewSampleImpl() { return SampleImple{} }

func (* SampleImpl) Say(ctx *context.Context, req *connect.Request[samplev1.SayRequest]) (*connect.Response[samplev1.Response], error) {
	s := req.GetSentence()
	d := req.GetDryRun()
	if d {
		return fmt.Sprintf("I will say: %s", s), nil
	}
	return fmt.Sprintf("%s!!", s), nil
}
</code></pre>
<h3 id="エントリポイント" onclick="
          event.preventDefault();
          const url = window.location.origin + window.location.pathname + &#x27;#&#x27; + this.id;
          navigator.clipboard.writeText(url).then(_ => {
            window.location.href = url;
          })
        " style="cursor: pointer;">エントリポイント</h3>
<pre><code class="language-go">package main

import (
	slog
	
	tool "github.com/naoyafurudono/good-tool"
	"github.com/naoyafurudono/sample-cli/service"
)

func main() {
	s := service.NewSampleImpl()
	// NewCLI()の結果（CLI）はサービスを登録される。
	// サービスを保持するCLIはサービスが契約するrpc（名前、入力、出力）を知っている。
	// これらはprotoの仕組みで生成される。protovalidateなどのプラグインもそのレイヤで対応できるはず。
	cli := tool.NewCLI().AddService(s)  // このあたりのインターフェースはもうちょい考えても良いかも？
	// Runがコマンドライン引数を読んで以下を半ドアリングする
	//   - 呼び出すrpcの判定（ルーティング）、サブコマンドの名前が対応する
	//   - rpcに渡す入力messageのデコード、サブコマンドへのフラグ引数が対応する
	//   - rpcの出力メッセージやエラー内容の出力、コマンドの標準出力、標準エラー出力、コマンドのステータスコードの出しわけが対応する
	if err := cli.Run(); err != nil {
		slog.Fatalf("unexpected inpu: %w", err)  // 予期しないサブコマンドが来たらエラーを返すのもまた一興かな。
	}
}
</code></pre>
<p>便利じゃない？</p>2:[["$","article",null,{"children":[["$","h1",null,{"children":"2024-11-20"}],["$","time",null,{"children":"2024-11-20T23:41:11+09:00"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}]]}],["$","span",null,{"style":{"marginInline":"5px"},"children":["$","a",null,{"href":"/posts/2024-11-13","children":"< 2024-11-13"}]}],["$","span",null,{"style":{"marginInline":"5px"},"children":["$","a",null,{"href":"/posts/2024-11-25","children":"2024-11-25 >"}]}]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"2024-11-20 | diary.nfurudono.com"}],["$","meta","3",{"name":"description","content":"以下のようなprotoスキーマを定義する。"}],["$","link","4",{"rel":"author","href":"https://blog.nfurudono.com/profile/"}],["$","meta","5",{"name":"author","content":"Naoya Furudono"}]]
1:null
